-------------Index.ts

import { GithubApiService } from './GithubApiService';
import { User } from './User';
import { Repo } from './Repo';
import * as _ from 'lodash';

let svc = new GithubApiService();

if (process.argv.length < 3) {
    console.error("Please pass the username as an argument!");
} else {

    let userName: string = process.argv[2];

    svc.getUserInfo(userName, (user: User) => {
        svc.getRepos(user.reposURL, (repos: Repo[]) => {
            let sortedRepos = _.sortBy(repos, [(repo: Repo) => repo.size * (-1)]);
            let filteredRepos = _.take(sortedRepos, 5);
            user.repos = filteredRepos;
            console.log(user);
        });
    });
}

-------------User.ts
import { Repo } from "./Repo";

export class User {
    login: string;
    fullName: string;
    repoCount: number;
    followerCount: number;
    reposURL: string
    repos?: Repo[];

    constructor(userResponse: any) {
        this.login = userResponse.login;
        this.fullName = userResponse.name;
        this.repoCount = userResponse.public_repos;
        this.followerCount = userResponse.followers;
        this.reposURL = userResponse.repos_url;
    }
}

----------GithubApiService.ts
import * as request from 'request';
import { Repo } from './Repo';
import { User } from './User';
import { Http2ServerResponse } from 'http2';

const OPTIONS: any = {
    headers: {
        'User-Agent': 'request'
    },
    proxy: '',
    rejectUnauthorized: false,
    json: true
}

export class GithubApiService {

    getUserInfo(userName: string, cb: (user: User) => any) {

        request.get('https://api.github.com/users/' + userName, OPTIONS,
            (error: any, response: any, body: any) => {

                if (error == null) {
                    if (response.headers.status === '200 OK') {
                        cb(new User(body));
                    } else {
                        console.error("Error in getting user response! Status :: ", response.headers.status);
                    }
                } else {
                    console.error("Error in getting user response! :: ", error);
                }
            });
    }

    getRepos(repoURL: string, cb: (repos: Repo[]) => any) {
        request.get(repoURL, OPTIONS,
            (error: any, response: any, body: any) => {

                if (error == null) {
                    if (response.headers.status === '200 OK') {

                        let repos = body.map(
                            (repo: any) => new Repo(repo)
                        );
                        cb(repos);

                    } else {
                        console.error("Error in getting repo response! Status :: ", response.headers.status);
                    }
                } else {
                    console.error("Error in getting repo response! :: ", error);
                }
            });

    }
}

-----------launch.json

{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Launch Program",
            "program": "${workspaceFolder}\\typescript-npm-project\\src\\index.ts", 
            "outFiles": [
                "${workspaceFolder}\\typescript-npm-project\\out\\*.js"
            ],
            "args": [
                "jfrost161"                
            ],
        }
    ]
}
